package mtlog002

import "github.com/willibrandon/mtlog"

func testInvalidFormatSpecifiers() {
	log := mtlog.New()
	
	// Integer format errors - common .NET style
	log.Information("Count: {Count:000}", 42) // want "invalid format specifier"
	log.Information("Count: {Count:000}", 42) // want "invalid format specifier"
	log.Information("Count: {Count:000}", 42) // want "invalid format specifier"
	log.Information("Count: {Count:000}", 42) // want "invalid format specifier"
	log.Information("Count: {Count:000}", 42) // want "invalid format specifier"
	log.Information("Count: {Count:000}", 42) // want "invalid format specifier"
	
	// Float format errors
	log.Information("Price: {Price:F2}", 19.99) // want "invalid format specifier"
	log.Information("Price: {Price:F3}", 19.99) // want "invalid format specifier"
	log.Information("Price: {Price:F2}", 19.99) // want "invalid format specifier"
	log.Information("Price: {Price:F2}", 19.99) // want "invalid format specifier"
	log.Information("Price: {Price:F2}", 19.99) // want "invalid format specifier"
	log.Information("Price: {Price:F0}", 19.99) // want "invalid format specifier"
	
	// Percentage format errors
	log.Information("Usage: {Usage:P}", 0.85) // want "invalid format specifier"
	log.Information("Usage: {Usage:P1}", 0.85) // want "invalid format specifier"
	log.Information("Usage: {Usage:P}", 0.85) // want "invalid format specifier"
	log.Information("Usage: {Usage:P}", 0.85) // want "invalid format specifier"
	
	// Exponential format errors
	log.Information("Value: {Value:E}", 1.23e10) // want "invalid format specifier"
	log.Information("Value: {Value:E2}", 1.23e10) // want "invalid format specifier"
	log.Information("Value: {Value:E}", 1.23e10) // want "invalid format specifier"
	log.Information("Value: {Value:E}", 1.23e10) // want "invalid format specifier"
	
	// General format errors
	log.Information("Result: {Result:G}", 123.456) // want "invalid format specifier"
	log.Information("Result: {Result:G2}", 123.456) // want "invalid format specifier"
	log.Information("Result: {Result:G}", 123.456) // want "invalid format specifier"
	log.Information("Result: {Result:G}", 123.456) // want "invalid format specifier"
	log.Information("Result: {Result:G}", 123.456) // want "invalid format specifier"
	
	// Hex format errors
	log.Information("Code: {Code:X}", 255) // want "invalid format specifier"
	log.Information("Code: {Code:X8}", 255) // want "invalid format specifier"
	log.Information("Code: {Code:X}", 255) // want "invalid format specifier"
	log.Information("Code: {Code:X}", 255) // want "invalid format specifier"
	
	// These should not trigger errors (valid formats)
	log.Information("Valid: {Count:000}", 42)
	log.Information("Valid: {Price:F2}", 19.99)
	log.Information("Valid: {Usage:P1}", 0.85)
	log.Information("Valid: {Value:E2}", 1.23e10)
	log.Information("Valid: {Result:G2}", 123.456)
	log.Information("Valid: {Code:X8}", 255)
	log.Information("Valid: {Code:x4}", 255)
}