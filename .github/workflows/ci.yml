name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-15]
        go: ['1.21', '1.22', '1.23', '1.24']
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}
        cache: false

    - name: Get dependencies
      run: go mod download

    - name: Test
      run: go test -v ./...

    - name: Test with race detector
      run: go test -race -v ./...

    - name: Test mtlog-analyzer
      run: |
        cd cmd/mtlog-analyzer
        go test -v ./...

    - name: Test benchmarks module
      run: |
        cd benchmarks
        go test -v ./...

    - name: Test logr adapter module
      run: |
        cd adapters/logr
        go test -v ./...

    - name: Test coverage
      run: go test -coverprofile=coverage.out ./...
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.23'

    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      if: matrix.os == 'ubuntu-latest' && matrix.go == '1.23'

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest

  fuzz:
    name: Fuzz Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false

    - name: Run fuzz tests
      run: |
        # Parser fuzz tests
        go test -fuzz=FuzzParseMessageTemplate -fuzztime=30s ./internal/parser
        go test -fuzz=FuzzExtractPropertyNames -fuzztime=30s ./internal/parser
        
        # Output template fuzz tests
        go test -fuzz=FuzzParseOutputTemplate -fuzztime=30s ./internal/formatters/output
        go test -fuzz=FuzzTimeFormatting -fuzztime=30s ./internal/formatters/output
        go test -fuzz=FuzzLevelFormatting -fuzztime=30s ./internal/formatters/output

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false

    - name: Run benchmarks
      run: |
        cd benchmarks
        go test -run=^$ -bench=. -benchmem -benchtime=10s . | tee ../benchmark.txt

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.txt

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      seq:
        image: datalust/seq:latest
        env:
          ACCEPT_EULA: Y
          SEQ_FIRSTRUN_NOAUTHENTICATION: true
        ports:
          - 5341:5341
          - 8080:80
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
        env:
          discovery.type: single-node
          xpack.security.enabled: false
        ports:
          - 9200:9200
        options: >-
          --health-cmd "curl -f http://localhost:9200/_cluster/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      splunk:
        image: splunk/splunk:latest
        env:
          SPLUNK_START_ARGS: --accept-license --seed-passwd changeme123!
          SPLUNK_PASSWORD: changeme123!
          SPLUNK_HEC_TOKEN: abcd1234
          SPLUNK_ENABLE_LISTEN: 9997
          SPLUNK_ADD: tcp 1514
        ports:
          - 8088:8088
          - 8089:8089
          - 8000:8000
        options: >-
          --health-cmd "curl -k -f https://localhost:8088/services/collector/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false

    - name: Wait for services
      run: |
        echo "Waiting for Seq..."
        timeout=30
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:8080/ 2>/dev/null; then
            echo "Seq is ready"
            break
          fi
          echo "Waiting for Seq... ($timeout seconds left)"
          sleep 1
          timeout=$((timeout-1))
        done
        if [ $timeout -eq 0 ]; then
          echo "Seq failed to start in 30 seconds"
          exit 1
        fi
        
        echo "Waiting for Elasticsearch..."
        timeout=30
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:9200/_cluster/health 2>/dev/null; then
            echo "Elasticsearch is ready"
            break
          fi
          echo "Waiting for Elasticsearch... ($timeout seconds left)"
          sleep 1
          timeout=$((timeout-1))
        done
        if [ $timeout -eq 0 ]; then
          echo "Elasticsearch failed to start in 30 seconds"
          exit 1
        fi
        
        echo "Waiting for Splunk..."
        timeout=60
        while [ $timeout -gt 0 ]; do
          if curl -k -f https://localhost:8088/services/collector/health 2>/dev/null; then
            echo "Splunk is ready"
            break
          fi
          echo "Waiting for Splunk... ($timeout seconds left)"
          sleep 1
          timeout=$((timeout-1))
        done
        if [ $timeout -eq 0 ]; then
          echo "Splunk failed to start in 60 seconds"
          exit 1
        fi

    - name: Run integration tests
      run: go test -tags=integration -v ./...
      env:
        SEQ_URL: http://localhost:5341
        SEQ_QUERY_URL: http://localhost:8080
        ELASTICSEARCH_URL: http://localhost:9200
        SPLUNK_URL: https://localhost:8088
        SPLUNK_QUERY_URL: https://localhost:8089
        SPLUNK_TOKEN: abcd1234
        SPLUNK_USERNAME: admin
        SPLUNK_PASSWORD: changeme123!