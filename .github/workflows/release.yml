name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags

    - name: Extract version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Extract changelog
      id: changelog
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        # Strip the 'v' prefix for CHANGELOG.md lookup
        VERSION_NO_V="${VERSION#v}"
        # Extract the section for this version from CHANGELOG.md
        CHANGELOG=$(awk "/^## \[${VERSION_NO_V}\]/ {p=1; next} /^## \[/ {p=0} p" CHANGELOG.md)
        
        # Handle multi-line output
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Get previous tag
      id: prev_tag
      run: |
        # Get the previous tag (excluding the current one)
        PREV_TAG=$(git tag --sort=-version:refname | grep -v "${{ steps.version.outputs.version }}" | head -n1)
        # If no previous tag, use initial commit
        if [ -z "$PREV_TAG" ]; then
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Build mtlog-analyzer
      run: |
        cd cmd/mtlog-analyzer
        GOOS=linux GOARCH=amd64 go build -o ../../mtlog-analyzer-linux-amd64 .
        GOOS=darwin GOARCH=amd64 go build -o ../../mtlog-analyzer-darwin-amd64 .
        GOOS=windows GOARCH=amd64 go build -o ../../mtlog-analyzer-windows-amd64.exe .

    - name: Setup Node.js for VS Code Extension
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: vscode-extension/mtlog-analyzer/package-lock.json

    - name: Build VS Code Extension
      run: |
        cd vscode-extension/mtlog-analyzer
        npm ci
        npm run compile
        npm install -g @vscode/vsce
        vsce package --no-dependencies

    - name: Setup Java for GoLand Plugin
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'

    - name: Build GoLand Plugin
      run: |
        cd goland-plugin
        chmod +x ./gradlew
        ./gradlew buildPlugin

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: ${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## Installation
          
          ### mtlog Library
          ```bash
          go get github.com/willibrandon/mtlog@${{ steps.version.outputs.version }}
          ```
          
          ### mtlog-analyzer Tool
          Download the binary for your platform below.
          
          ### VS Code Extension
          Install from the [VS Code Marketplace](https://marketplace.visualstudio.com/items?itemName=mtlog.mtlog-analyzer) or download the `.vsix` file below.
          
          ### GoLand Plugin
          Install from JetBrains Marketplace or download the `.zip` file below.
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.prev_tag.outputs.prev_tag }}...${{ steps.version.outputs.version }}
        files: |
          mtlog-analyzer-linux-amd64
          mtlog-analyzer-darwin-amd64
          mtlog-analyzer-windows-amd64.exe
          vscode-extension/mtlog-analyzer/*.vsix
          goland-plugin/build/distributions/*.zip
        draft: false
        prerelease: false

    - name: Publish VS Code Extension
      continue-on-error: true  # Don't fail the whole workflow if marketplace publish fails
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
      run: |
        cd vscode-extension/mtlog-analyzer
        vsce publish -p $VSCE_PAT

    - name: Publish GoLand Plugin
      continue-on-error: true  # Don't fail the whole workflow if marketplace publish fails
      env:
        JETBRAINS_TOKEN: ${{ secrets.JETBRAINS_TOKEN }}
      run: |
        cd goland-plugin
        ./gradlew publishPlugin